// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protoFile/defaults.proto

/*
Package protoFile is a generated protocol buffer package.

It is generated from these files:
	protoFile/defaults.proto

It has these top-level messages:
	RedisCacheRequest
	RedisCacheReply
	GetCacheRequest
	GetCacheReply
	FrLogRequest
	FrLogReply
*/
package protoFile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 写redis缓存 传入参数
type RedisCacheRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Express int64  `protobuf:"varint,3,opt,name=express" json:"express,omitempty"`
}

func (m *RedisCacheRequest) Reset()                    { *m = RedisCacheRequest{} }
func (m *RedisCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*RedisCacheRequest) ProtoMessage()               {}
func (*RedisCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RedisCacheRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RedisCacheRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RedisCacheRequest) GetExpress() int64 {
	if m != nil {
		return m.Express
	}
	return 0
}

// 写redis缓存 返回信息
type RedisCacheReply struct {
	Code    int32             `protobuf:"varint,4,opt,name=code" json:"code,omitempty"`
	Message string            `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Data    map[string]string `protobuf:"bytes,6,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RedisCacheReply) Reset()                    { *m = RedisCacheReply{} }
func (m *RedisCacheReply) String() string            { return proto.CompactTextString(m) }
func (*RedisCacheReply) ProtoMessage()               {}
func (*RedisCacheReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RedisCacheReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RedisCacheReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RedisCacheReply) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// 获取redis缓存 传入参数
type GetCacheRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetCacheRequest) Reset()                    { *m = GetCacheRequest{} }
func (m *GetCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCacheRequest) ProtoMessage()               {}
func (*GetCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetCacheRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 获取redis缓存 返回参数
type GetCacheReply struct {
	Code    int32             `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Data    map[string]string `protobuf:"bytes,4,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetCacheReply) Reset()                    { *m = GetCacheReply{} }
func (m *GetCacheReply) String() string            { return proto.CompactTextString(m) }
func (*GetCacheReply) ProtoMessage()               {}
func (*GetCacheReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetCacheReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetCacheReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetCacheReply) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// 写日志 传入参数
type FrLogRequest struct {
	Tag   string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Info  string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Level string `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
}

func (m *FrLogRequest) Reset()                    { *m = FrLogRequest{} }
func (m *FrLogRequest) String() string            { return proto.CompactTextString(m) }
func (*FrLogRequest) ProtoMessage()               {}
func (*FrLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FrLogRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *FrLogRequest) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *FrLogRequest) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

// 写日志 返回信息
type FrLogReply struct {
	Code    int32             `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Message string            `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Data    map[string]string `protobuf:"bytes,5,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FrLogReply) Reset()                    { *m = FrLogReply{} }
func (m *FrLogReply) String() string            { return proto.CompactTextString(m) }
func (*FrLogReply) ProtoMessage()               {}
func (*FrLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FrLogReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FrLogReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FrLogReply) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RedisCacheRequest)(nil), "protoFile.RedisCacheRequest")
	proto.RegisterType((*RedisCacheReply)(nil), "protoFile.RedisCacheReply")
	proto.RegisterType((*GetCacheRequest)(nil), "protoFile.GetCacheRequest")
	proto.RegisterType((*GetCacheReply)(nil), "protoFile.GetCacheReply")
	proto.RegisterType((*FrLogRequest)(nil), "protoFile.FrLogRequest")
	proto.RegisterType((*FrLogReply)(nil), "protoFile.FrLogReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// 写redis缓存
	RedisCache(ctx context.Context, in *RedisCacheRequest, opts ...grpc.CallOption) (*RedisCacheReply, error)
	// 获取redis缓存
	GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheReply, error)
	// 写kibana日志
	FrLog(ctx context.Context, in *FrLogRequest, opts ...grpc.CallOption) (*FrLogReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) RedisCache(ctx context.Context, in *RedisCacheRequest, opts ...grpc.CallOption) (*RedisCacheReply, error) {
	out := new(RedisCacheReply)
	err := grpc.Invoke(ctx, "/protoFile.Greeter/RedisCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheReply, error) {
	out := new(GetCacheReply)
	err := grpc.Invoke(ctx, "/protoFile.Greeter/GetCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) FrLog(ctx context.Context, in *FrLogRequest, opts ...grpc.CallOption) (*FrLogReply, error) {
	out := new(FrLogReply)
	err := grpc.Invoke(ctx, "/protoFile.Greeter/FrLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// 写redis缓存
	RedisCache(context.Context, *RedisCacheRequest) (*RedisCacheReply, error)
	// 获取redis缓存
	GetCache(context.Context, *GetCacheRequest) (*GetCacheReply, error)
	// 写kibana日志
	FrLog(context.Context, *FrLogRequest) (*FrLogReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_RedisCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).RedisCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFile.Greeter/RedisCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).RedisCache(ctx, req.(*RedisCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFile.Greeter/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetCache(ctx, req.(*GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_FrLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).FrLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFile.Greeter/FrLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).FrLog(ctx, req.(*FrLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoFile.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RedisCache",
			Handler:    _Greeter_RedisCache_Handler,
		},
		{
			MethodName: "GetCache",
			Handler:    _Greeter_GetCache_Handler,
		},
		{
			MethodName: "FrLog",
			Handler:    _Greeter_FrLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoFile/defaults.proto",
}

func init() { proto.RegisterFile("protoFile/defaults.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x40, 0x59, 0x6c, 0x43, 0x99, 0xb6, 0x82, 0xae, 0x5a, 0x75, 0x65, 0x55, 0xaa, 0xb5, 0x6a,
	0x25, 0x9f, 0x5c, 0x09, 0xa4, 0x96, 0xf6, 0x48, 0x5b, 0xa8, 0xaa, 0x9e, 0x7c, 0xe9, 0x79, 0x83,
	0x07, 0xc7, 0x8a, 0xc1, 0x8e, 0x77, 0x41, 0xf0, 0x47, 0x39, 0xe5, 0x90, 0x4f, 0xc9, 0x17, 0x45,
	0x5e, 0xdb, 0x60, 0x12, 0xa3, 0x5c, 0xb8, 0xcd, 0x8c, 0x3d, 0x4f, 0xfb, 0x66, 0x06, 0x58, 0x9a,
	0x25, 0x2a, 0x99, 0x46, 0x31, 0x7e, 0x09, 0x70, 0x21, 0xd6, 0xb1, 0x92, 0x9e, 0x2e, 0xd1, 0xde,
	0xfe, 0x0b, 0xff, 0x0f, 0x6f, 0x7c, 0x0c, 0x22, 0xf9, 0x53, 0xcc, 0x2f, 0xd1, 0xc7, 0xeb, 0x35,
	0x4a, 0x45, 0x29, 0x98, 0x2b, 0xb1, 0x44, 0x46, 0x1c, 0xe2, 0xf6, 0x7c, 0x1d, 0xd3, 0xb7, 0x60,
	0x6d, 0x44, 0xbc, 0x46, 0xd6, 0xd6, 0xc5, 0x22, 0xa1, 0x0c, 0xba, 0xb8, 0x4d, 0x33, 0x94, 0x92,
	0x19, 0x0e, 0x71, 0x0d, 0xbf, 0x4a, 0xf9, 0x1d, 0x81, 0x7e, 0x9d, 0x9c, 0xc6, 0xbb, 0x9c, 0x3b,
	0x4f, 0x02, 0x64, 0xa6, 0x43, 0x5c, 0xcb, 0xd7, 0x71, 0x4e, 0x58, 0xa2, 0x94, 0x22, 0x44, 0x66,
	0x69, 0x72, 0x95, 0xd2, 0x31, 0x98, 0x81, 0x50, 0x82, 0x75, 0x1c, 0xc3, 0x7d, 0x39, 0xfc, 0xe4,
	0xed, 0x1f, 0xed, 0x3d, 0xe2, 0x7a, 0xbf, 0x84, 0x12, 0xbf, 0x57, 0x2a, 0xdb, 0xf9, 0xba, 0xc3,
	0xfe, 0x06, 0xbd, 0x7d, 0x89, 0x0e, 0xc0, 0xb8, 0xc2, 0x5d, 0xe9, 0x92, 0x87, 0xcd, 0x2a, 0x3f,
	0xda, 0x63, 0xc2, 0x3f, 0x43, 0x7f, 0x86, 0xea, 0xb9, 0x59, 0xf0, 0x5b, 0x02, 0xaf, 0x0f, 0xff,
	0xd5, 0xcd, 0xda, 0xcd, 0x66, 0xc6, 0xb1, 0xd9, 0xd7, 0xd2, 0xcc, 0xd4, 0x66, 0xbc, 0x66, 0x76,
	0x44, 0x3d, 0x9f, 0xd7, 0x5f, 0x78, 0x35, 0xcd, 0xfe, 0x25, 0x61, 0x25, 0x35, 0x00, 0x43, 0x89,
	0xb0, 0xea, 0x55, 0x22, 0xcc, 0x05, 0xa2, 0xd5, 0x22, 0x29, 0x5b, 0x75, 0x9c, 0xf3, 0x62, 0xdc,
	0x60, 0x5c, 0x3e, 0xbf, 0x48, 0xf8, 0x0d, 0x01, 0x28, 0x61, 0x75, 0x73, 0xa3, 0xd9, 0xdc, 0x3c,
	0x36, 0x1f, 0x95, 0xe6, 0x96, 0x36, 0xff, 0x58, 0x33, 0x3f, 0x20, 0xcf, 0xa6, 0x3d, 0xbc, 0x27,
	0xd0, 0x9d, 0x65, 0x88, 0x0a, 0x33, 0xfa, 0x07, 0xe0, 0x70, 0x36, 0xf4, 0xc3, 0x89, 0x6b, 0xd2,
	0xe3, 0xb1, 0xed, 0xd3, 0xb7, 0xc6, 0x5b, 0x74, 0x02, 0x2f, 0xaa, 0x35, 0x51, 0xbb, 0x71, 0x77,
	0x05, 0x85, 0x9d, 0xda, 0x2b, 0x6f, 0xd1, 0xef, 0x60, 0x69, 0x61, 0xfa, 0xfe, 0xe9, 0x08, 0x8a,
	0xee, 0x77, 0x8d, 0xb3, 0xe1, 0xad, 0x09, 0x85, 0x41, 0x94, 0x78, 0x61, 0x96, 0xce, 0x3d, 0xdc,
	0x8a, 0x65, 0x1a, 0xa3, 0xbc, 0xe8, 0xe8, 0x7f, 0x47, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f,
	0xed, 0x63, 0x5e, 0xf3, 0x03, 0x00, 0x00,
}
